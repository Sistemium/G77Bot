import log from 'sistemium-telegram/services/log';
import Markup from 'telegraf/markup';
import * as pha from '../services/auth';
import validatePhoneNumber from '../services/functions';
import { addUser, removeUser } from '../services/users';
import { orgName } from '../services/dictionary';
import { settingsOptions } from '../services/keyboard';

const { debug, error } = log('auth');

export async function auth(ctx) {

  const { match } = ctx;

  const [, phoneNumber] = match || [];

  debug('auth', phoneNumber);

  if (phoneNumber) {
    await authWithPhone(ctx, phoneNumber);
  } else {
    await explainAuth(ctx);
  }

}


export async function authWithPhone(ctx, phoneNumberNotValidated) {

  const phoneNumber = validatePhoneNumber(phoneNumberNotValidated);

  debug('authWithPhone', phoneNumberNotValidated, phoneNumber);

  if (!phoneNumber) {
    throw new Error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
  }

  const { session } = ctx;

  try {

    const id = await pha.login(phoneNumber);

    debug('auth got id:', id);

    session.tempPhoneNumber = phoneNumber;
    session.waitingForCode = id;

    delete session.waitingForPhone;

  } catch ({ message }) {
    error(message);
    await ctx.reply(`–Ø –Ω–µ –∑–Ω–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${phoneNumber}`);
    return;
  }

  const reply = [
    '‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –°–ú–°-—Å–æ–æ–±—â–µ–Ω–∏–∏',
    `–Ω–∞ –Ω–æ–º–µ—Ä ${phoneNumber}`,
  ].join(' ');

  await ctx.reply(reply, settingsOptions(ctx));

}

export async function confirm(ctx) {

  const { message: { text: code }, from: { id: userId }, session } = ctx;

  if (!session.waitingForCode) {
    replyNotAuthorized(ctx);
    return;
  }

  const isCode = /^\d+$/.test(code);

  if (!isCode) {
    ctx.reply('–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ –∏–∑ –°–ú–°, –∫–æ—Ç–æ—Ä–æ–µ —è –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª');
    return;
  }

  try {

    const { accessToken } = await pha.confirm(code, session.waitingForCode);

    const { account, roles, roles: { org, salesman } } = await pha.roles(accessToken);

    Object.assign(session, {
      account,
      roles,
      accessToken,
    });

    delete session.waitingForCode;
    session.phoneNumber = session.tempPhoneNumber;
    delete session.tempPhoneNumber;

    const { name, authId } = account;

    await addUser(org, userId, {
      org,
      phoneNumber: session.phoneNumber,
      name,
      salesman,
      authId,
    });

    await ctx.reply(`‚úÖ <b>${name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ ¬´${orgName(org)}¬ª!`, settingsOptions(ctx));

  } catch (e) {
    await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!');
  }


}

export async function logout(ctx) {

  try {

    const { session, from: { id: userId } } = ctx;

    const { org } = session.roles;

    session.phoneNumber = undefined;
    session.waitingForPhone = undefined;
    session.tempPhoneNumber = undefined;
    session.waitingForCode = undefined;
    session.account = undefined;
    session.roles = undefined;

    await removeUser(org, userId);

    await ctx.reply('–û–∫', settingsOptions(ctx));

  } catch (e) {
    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', settingsOptions(ctx));
    error(e);
  }

}


export async function getRoles(ctx) {

  const { session: { account: roles } } = ctx;

  if (!roles) {
    await replyNotAuthorized(ctx);
    return;
  }

  ctx.replyJson(roles);

}

export async function explainAuth(ctx) {

  const { session } = ctx;
  session.waitingForPhone = true;

  const reply = '–¢—ã –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π. –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.';

  const buttons = [
    [{
      text: 'üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä',
      request_contact: true,
    }],
    ['üî¢ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä'],
    ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'],
  ];

  const options = Markup
    .keyboard(buttons)
    .oneTime()
    .resize()
    .extra();

  await ctx.reply(reply, options);

}

export async function onCancel(ctx) {

  const { session } = ctx;

  delete session.waitingForPhone;
  delete session.waitingForCode;
  delete session.tempPhoneNumber;

  await ctx.reply('–•–æ—Ä–æ—à–æ, –ø–æ—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑—É–µ—à—å—Å—è', settingsOptions(ctx));

}

export async function onOtherPhone(ctx) {
  const { session } = ctx;
  session.waitingForPhone = true;
  await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ 8–∫—É –∏–ª–∏ +7', settingsOptions(ctx));
}

function replyNotAuthorized(ctx) {
  ctx.reply('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /auth');
}
